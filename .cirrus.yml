env: # Environt variable to pass to all tasks
  CIRRUS_CLONE_DEPTH: 1 # No need to clone with whole history
  CIRRUS_WORKING_DIR: "/tmp/ci" # Where to clone repo

  # For rclone with google drive or any cloud! After first commit pushing, login to https://cirrus-ci.com , click top left corner 3 dot menu, click repository(yourname/aosp-builder) > Repository Settings > Secured Variables > enter content of ~/.config/rclone/rclone.conf (from pc where you setup rclone) > ENCRYPT, copy that ENCRYPTED hash
  # ENCRYPTED variables is unique for every repository, so you cant use my one, create you rclone config https://rclone.org/drive/#making-your-own-client-id
  rclone_config: "ENCRYPTED[58905adc0bf8e2993c0f327d687a3ba40008ff9e15576c77193774795739ae6a1afcc62d6f109b88b0e0e568bd590fdf]"
  TOKEN: "ENCRYPTED[795a60b56e8029bec0afa2320f0f0b020680d73e1487216365111aca4d8fe2734fdfa2f4802b1d3a7373e4d548e2bf2c]"

  # Regular env variables that i can use for selecting my rom and build-type etc....
  rom: "legion"
  branch: "11"
  with_gapps: "false"
  build_type: "userdebug"
  zip: "out/target/product/miatoll/*Official*.zip"
  make: "mka legion"
  gdrivedir: "Legion"

task:
  name: aosp # Project name
  timeout_in: 120m # Otherwise it will timeout at 60m automatically, 120m highest in free account
  container:
    image: apon77/aosp:latest # It has built in setup environment + repo, aria2, rclone, pigz, username ci, and email ci@ci.ci [You can use your own docker image if you want, or you can use this one too!]
    cpu: 8 #8 cpu for dummy build, 10 or more cpu for final build, sometimes more than 8 cpu will cause a timelock, so you wont be able to run ci again within few hours, in build script use -j8 or -j10 depending what you used here, otherwise low memory issue will happen, 16cpu highest
    memory: 24G # So that we can have ram when needed, 24G highest
  download_ccache_background_script: # To download ccache in background
    - ./download_ccache # Ccache download script
  sync_script: # To sync source
    - ./sync # Source sync script
  monitor_background_script: # To monitor ccache and machine status every minute, runs in background
    - ./monitor # Monitor script
  build_script: # Actual build script foreground
    - ./build # Build script to run
  upload_ccache_script: # Upload ccache to cloud foreground
    - ./upload_ccache # Ccache uploading script
